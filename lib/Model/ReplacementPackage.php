<?php
/**
 * ReplacementPackage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MPL API
 *
 * <div style='width: 100%;margin: 0px auto;'>      <div style='float: left; width:47%'>          <h1>MPL API</h1>          <h2> - címiratok nyomtatása, riportok lekérése, fixpontok lekérdezése </h2>          <div>&nbsp;</div>          <p>A végpontok működését leíró dokumentációt lentebb találja.</p>          <p>A fejlesztéshez szükséges további információkat, így az integrációs javaslatot, technikai leírást (token kérés), példa json-öket, stb., a fenti Dokumentáció menüre kattintva érheti el.</p>          <p>A lentebbi dokumentációban a</p>          <ul>              <li>csak belföldi alapszolgáltatáshoz használható elemeket a leírás elején szereplő ►DOM◄,</li>              <li>csak nemzetközi vonatkozásban használható elemeket a leírás elején szereplő ►INT◄</li>          </ul>          <p>szöveg jelzi.</p>          <p>Ahol nem szerepel semmilyen jelölés, azok az elemek mindkét vonatkozásban használhatók.</p>      </div>      <div style='float:right; width:47%'>          <h1>MPL API</h1>          <h2> - query of fixed points, printing of address labels, request for reports </h2>          <div>&nbsp;</div>          <p>Specification describing the operation of endpoints can be found below.</p>          <p>Any further information necessary for the development, such as the integration suggestion, technical description (token request), example JSONs, etc., are available by clicking on the Documentation menu above.</p>          <p>In the specification below,</p>          <ul>              <li>the elements that may be used only for domestic basic service are indicated by the lettering ►DOM◄,</li>              <li>the elements that may be used only in international regard are indicated by the lettering ►INT◄</li>          </ul>          <p>at the beginning of the description.</p>          <p>Where no indication is provided, those elements can be used in both cases.</p>      </div>  </div>  <div id=\"mplapi_descriptionContainer_bottom\"></div><div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/mplapi</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/mplapi</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ReplacementPackage Class Doc Comment
 *
 * @category Class
 * @description Cserecsomag adatai. Cserecsomag többletszolgáltatás használata esetén küldeni kell az item.replacementPackage részt is. Az alapcsomag részében a K_CSE szolgáltatást, míg a hozzá kapcsolódó inverz csomagnál (item.replacementPackage) a K_CSA szolgáltatást kell megadni. Fontos! Az alábbi listában látható további többletszolgáltatások közül a replacementPackage alatt csak ezek adhatók meg: K_TER, T_TOR   /   Data of replacement package. In case of using the additional service of replacement package, the item.replacementPackage part shall be sent as well. In the basic package part the K_CSE service, while in the case of the Inverz package related to it(item.replacementPackage) the K_CSA service must be provided. Important! Of the additional services listed below, only the following can be provided under replacementPackage: K_TER, T_TOR
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReplacementPackage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReplacementPackage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'custom_data1' => 'string',
        'custom_data2' => 'string',
        'extra' => 'string[]',
        'weight' => '\Swagger\Client\Model\UnitValue',
        'value' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'custom_data1' => null,
        'custom_data2' => null,
        'extra' => null,
        'weight' => null,
        'value' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'custom_data1' => 'customData1',
        'custom_data2' => 'customData2',
        'extra' => 'extra',
        'weight' => 'weight',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'custom_data1' => 'setCustomData1',
        'custom_data2' => 'setCustomData2',
        'extra' => 'setExtra',
        'weight' => 'setWeight',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'custom_data1' => 'getCustomData1',
        'custom_data2' => 'getCustomData2',
        'extra' => 'getExtra',
        'weight' => 'getWeight',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const EXTRA_ENY = 'K_ENY';
    const EXTRA_TER = 'K_TER';
    const EXTRA_UVT = 'K_UVT';
    const EXTRA_TOR = 'K_TOR';
    const EXTRA_ORZ = 'K_ORZ';
    const EXTRA_IDO = 'K_IDO';
    const EXTRA_RLC = 'K_RLC';
    const EXTRA_TEV = 'K_TEV';
    const EXTRA_MSZ = 'K_MSZ';
    const EXTRA_SKZ = 'K_SKZ';
    const EXTRA_ALA = 'K_ALA';
    const EXTRA_BER = 'K_BER';
    const EXTRA_EKE = 'K_EKE';
    const EXTRA_AAT = 'K_AAT';
    const EXTRA_AAA = 'K_AAA';
    const EXTRA_DOK = 'K_DOK';
    const EXTRA_TEP = 'K_TEP';
    const EXTRA_PSZ = 'K_PSZ';
    const EXTRA_IDA = 'K_IDA';
    const EXTRA_FNK = 'K_FNK';
    const EXTRA_EXT = 'K_EXT';
    const EXTRA_CSE = 'K_CSE';
    const EXTRA_CSA = 'K_CSA';
    const EXTRA_INV = 'K_INV';
    const EXTRA_LEH = 'K_LEH';
    const EXTRA_TET = 'K_TET';
    const EXTRA_GLO = 'K_GLO';
    const EXTRA_LEZ = 'K_LEZ';
    const EXTRA_POT = 'K_POT';
    const EXTRA_VNY = 'K_VNY';
    const EXTRA_EFF = 'K_EFF';
    const EXTRA_VIK = 'K_VIK';
    const EXTRA_ZSK = 'K_ZSK';
    const EXTRA_EFC = 'K_EFC';
    const EXTRA_DU = 'K_DU';
    const EXTRA_LX = 'K_LX';
    const EXTRA_KRC = 'K_KRC';
    const EXTRA_ESZ = 'K_ESZ';
    const EXTRA_ETV = 'K_ETV';
    const EXTRA_KRF = 'K_KRF';
    const EXTRA__VAR = 'K_VAR';
    const EXTRA_UTN = 'K_UTN';
    const EXTRA_VER = 'K_VER';
    const EXTRA_EPR = 'K_EPR';
    const EXTRA_IDG = 'K_IDG';
    const EXTRA_KNY = 'K_KNY';
    const EXTRA_KOR = 'K_KOR';
    const EXTRA_PRE = 'K_PRE';
    const EXTRA_UTK = 'K_UTK';
    const EXTRA_ANT = 'K_ANT';
    const EXTRA_CIP = 'K_CIP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtraAllowableValues()
    {
        return [
            self::EXTRA_ENY,
            self::EXTRA_TER,
            self::EXTRA_UVT,
            self::EXTRA_TOR,
            self::EXTRA_ORZ,
            self::EXTRA_IDO,
            self::EXTRA_RLC,
            self::EXTRA_TEV,
            self::EXTRA_MSZ,
            self::EXTRA_SKZ,
            self::EXTRA_ALA,
            self::EXTRA_BER,
            self::EXTRA_EKE,
            self::EXTRA_AAT,
            self::EXTRA_AAA,
            self::EXTRA_DOK,
            self::EXTRA_TEP,
            self::EXTRA_PSZ,
            self::EXTRA_IDA,
            self::EXTRA_FNK,
            self::EXTRA_EXT,
            self::EXTRA_CSE,
            self::EXTRA_CSA,
            self::EXTRA_INV,
            self::EXTRA_LEH,
            self::EXTRA_TET,
            self::EXTRA_GLO,
            self::EXTRA_LEZ,
            self::EXTRA_POT,
            self::EXTRA_VNY,
            self::EXTRA_EFF,
            self::EXTRA_VIK,
            self::EXTRA_ZSK,
            self::EXTRA_EFC,
            self::EXTRA_DU,
            self::EXTRA_LX,
            self::EXTRA_KRC,
            self::EXTRA_ESZ,
            self::EXTRA_ETV,
            self::EXTRA_KRF,
            self::EXTRA__VAR,
            self::EXTRA_UTN,
            self::EXTRA_VER,
            self::EXTRA_EPR,
            self::EXTRA_IDG,
            self::EXTRA_KNY,
            self::EXTRA_KOR,
            self::EXTRA_PRE,
            self::EXTRA_UTK,
            self::EXTRA_ANT,
            self::EXTRA_CIP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['custom_data1'] = isset($data['custom_data1']) ? $data['custom_data1'] : null;
        $this->container['custom_data2'] = isset($data['custom_data2']) ? $data['custom_data2'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets custom_data1
     *
     * @return string
     */
    public function getCustomData1()
    {
        return $this->container['custom_data1'];
    }

    /**
     * Sets custom_data1
     *
     * @param string $custom_data1 Tetszőleges ügyféladat (pl. ügyfél oldali azonosító).   /   Any customer data (e.g.: identifier from the customer).
     *
     * @return $this
     */
    public function setCustomData1($custom_data1)
    {
        $this->container['custom_data1'] = $custom_data1;

        return $this;
    }

    /**
     * Gets custom_data2
     *
     * @return string
     */
    public function getCustomData2()
    {
        return $this->container['custom_data2'];
    }

    /**
     * Sets custom_data2
     *
     * @param string $custom_data2 Tetszőleges ügyféladat (pl. ügyfél oldali azonosító).   /   Any customer data (e.g.: identifier from the customer).
     *
     * @return $this
     */
    public function setCustomData2($custom_data2)
    {
        $this->container['custom_data2'] = $custom_data2;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string[]
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string[] $extra Többletszolgáltatások.   /   Additional services.
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $allowedValues = $this->getExtraAllowableValues();
        if (!is_null($extra) && array_diff($extra, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'extra', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \Swagger\Client\Model\UnitValue
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \Swagger\Client\Model\UnitValue $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets value
     *
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int $value Az értéknyilvánítás összege Ft-ban maximum 2MFt-ig   /   The amount of the value insurance in HUF up to a maximum of HUF 2 million
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
