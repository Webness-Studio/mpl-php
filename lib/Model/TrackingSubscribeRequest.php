<?php
/**
 * TrackingSubscribeRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  WebnessStudio\MPL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MPL API
 *
 * <div style='width: 100%;margin: 0px auto;'>      <div style='float: left; width:47%'>          <h1>MPL API</h1>          <h2> - címiratok nyomtatása, riportok lekérése, fixpontok lekérdezése </h2>          <div>&nbsp;</div>          <p>A végpontok működését leíró dokumentációt lentebb találja.</p>          <p>A fejlesztéshez szükséges további információkat, így az integrációs javaslatot, technikai leírást (token kérés), példa json-öket, stb., a fenti Dokumentáció menüre kattintva érheti el.</p>          <p>A lentebbi dokumentációban a</p>          <ul>              <li>csak belföldi alapszolgáltatáshoz használható elemeket a leírás elején szereplő ►DOM◄,</li>              <li>csak nemzetközi vonatkozásban használható elemeket a leírás elején szereplő ►INT◄</li>          </ul>          <p>szöveg jelzi.</p>          <p>Ahol nem szerepel semmilyen jelölés, azok az elemek mindkét vonatkozásban használhatók.</p>      </div>      <div style='float:right; width:47%'>          <h1>MPL API</h1>          <h2> - query of fixed points, printing of address labels, request for reports </h2>          <div>&nbsp;</div>          <p>Specification describing the operation of endpoints can be found below.</p>          <p>Any further information necessary for the development, such as the integration suggestion, technical description (token request), example JSONs, etc., are available by clicking on the Documentation menu above.</p>          <p>In the specification below,</p>          <ul>              <li>the elements that may be used only for domestic basic service are indicated by the lettering ►DOM◄,</li>              <li>the elements that may be used only in international regard are indicated by the lettering ►INT◄</li>          </ul>          <p>at the beginning of the description.</p>          <p>Where no indication is provided, those elements can be used in both cases.</p>      </div>  </div>  <div id=\"mplapi_descriptionContainer_bottom\"></div><div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/mplapi</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/mplapi</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\Model;

use \ArrayAccess;
use \WebnessStudio\MPL\ObjectSerializer;

/**
 * TrackingSubscribeRequest Class Doc Comment
 *
 * @category Class
 * @package  WebnessStudio\MPL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TrackingSubscribeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TrackingSubscribeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sender' => 'string',
        'tracking_number' => 'string',
        'account_code' => 'string',
        'service_endpoint' => 'string',
        'dml_flag' => 'bool',
        'language' => 'string',
        'param1' => 'string',
        'param2' => 'string',
        'param3' => 'string',
        'param4' => 'string',
        'param5' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sender' => null,
        'tracking_number' => null,
        'account_code' => null,
        'service_endpoint' => null,
        'dml_flag' => null,
        'language' => null,
        'param1' => null,
        'param2' => null,
        'param3' => null,
        'param4' => null,
        'param5' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sender' => 'sender',
        'tracking_number' => 'trackingNumber',
        'account_code' => 'accountCode',
        'service_endpoint' => 'serviceEndpoint',
        'dml_flag' => 'dmlFlag',
        'language' => 'language',
        'param1' => 'param1',
        'param2' => 'param2',
        'param3' => 'param3',
        'param4' => 'param4',
        'param5' => 'param5'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sender' => 'setSender',
        'tracking_number' => 'setTrackingNumber',
        'account_code' => 'setAccountCode',
        'service_endpoint' => 'setServiceEndpoint',
        'dml_flag' => 'setDmlFlag',
        'language' => 'setLanguage',
        'param1' => 'setParam1',
        'param2' => 'setParam2',
        'param3' => 'setParam3',
        'param4' => 'setParam4',
        'param5' => 'setParam5'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sender' => 'getSender',
        'tracking_number' => 'getTrackingNumber',
        'account_code' => 'getAccountCode',
        'service_endpoint' => 'getServiceEndpoint',
        'dml_flag' => 'getDmlFlag',
        'language' => 'getLanguage',
        'param1' => 'getParam1',
        'param2' => 'getParam2',
        'param3' => 'getParam3',
        'param4' => 'getParam4',
        'param5' => 'getParam5'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['service_endpoint'] = isset($data['service_endpoint']) ? $data['service_endpoint'] : null;
        $this->container['dml_flag'] = isset($data['dml_flag']) ? $data['dml_flag'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['param1'] = isset($data['param1']) ? $data['param1'] : null;
        $this->container['param2'] = isset($data['param2']) ? $data['param2'] : null;
        $this->container['param3'] = isset($data['param3']) ? $data['param3'] : null;
        $this->container['param4'] = isset($data['param4']) ? $data['param4'] : null;
        $this->container['param5'] = isset($data['param5']) ? $data['param5'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender Küldő   /   Sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Küldemény azonosító   /   Item identifier
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets account_code
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string $account_code Ügyfél azonosító   /   Accounting code
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets service_endpoint
     *
     * @return string
     */
    public function getServiceEndpoint()
    {
        return $this->container['service_endpoint'];
    }

    /**
     * Sets service_endpoint
     *
     * @param string $service_endpoint Szolgáltatás végpont   /   Service endpoint
     *
     * @return $this
     */
    public function setServiceEndpoint($service_endpoint)
    {
        $this->container['service_endpoint'] = $service_endpoint;

        return $this;
    }

    /**
     * Gets dml_flag
     *
     * @return bool
     */
    public function getDmlFlag()
    {
        return $this->container['dml_flag'];
    }

    /**
     * Sets dml_flag
     *
     * @param bool $dml_flag Új adatszolgáltatás vagy adatszolgáltatás törlése   /   New data provision or cancelling data provision
     *
     * @return $this
     */
    public function setDmlFlag($dml_flag)
    {
        $this->container['dml_flag'] = $dml_flag;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language Nyelv   /   Language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets param1
     *
     * @return string
     */
    public function getParam1()
    {
        return $this->container['param1'];
    }

    /**
     * Sets param1
     *
     * @param string $param1 param1
     *
     * @return $this
     */
    public function setParam1($param1)
    {
        $this->container['param1'] = $param1;

        return $this;
    }

    /**
     * Gets param2
     *
     * @return string
     */
    public function getParam2()
    {
        return $this->container['param2'];
    }

    /**
     * Sets param2
     *
     * @param string $param2 param2
     *
     * @return $this
     */
    public function setParam2($param2)
    {
        $this->container['param2'] = $param2;

        return $this;
    }

    /**
     * Gets param3
     *
     * @return string
     */
    public function getParam3()
    {
        return $this->container['param3'];
    }

    /**
     * Sets param3
     *
     * @param string $param3 param3
     *
     * @return $this
     */
    public function setParam3($param3)
    {
        $this->container['param3'] = $param3;

        return $this;
    }

    /**
     * Gets param4
     *
     * @return string
     */
    public function getParam4()
    {
        return $this->container['param4'];
    }

    /**
     * Sets param4
     *
     * @param string $param4 param4
     *
     * @return $this
     */
    public function setParam4($param4)
    {
        $this->container['param4'] = $param4;

        return $this;
    }

    /**
     * Gets param5
     *
     * @return string
     */
    public function getParam5()
    {
        return $this->container['param5'];
    }

    /**
     * Sets param5
     *
     * @param string $param5 param5
     *
     * @return $this
     */
    public function setParam5($param5)
    {
        $this->container['param5'] = $param5;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
