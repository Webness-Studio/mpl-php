<?php
/**
 * Service
 *
 * PHP version 5
 *
 * @category Class
 * @package  WebnessStudio/MPL/Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MPL API
 *
 * <div style='width: 100%;margin: 0px auto;'>      <div style='float: left; width:47%'>          <h1>MPL API</h1>          <h2> - címiratok nyomtatása, riportok lekérése, fixpontok lekérdezése </h2>          <div>&nbsp;</div>          <p>A végpontok működését leíró dokumentációt lentebb találja.</p>          <p>A fejlesztéshez szükséges további információkat, így az integrációs javaslatot, technikai leírást (token kérés), példa json-öket, stb., a fenti Dokumentáció menüre kattintva érheti el.</p>          <p>A lentebbi dokumentációban a</p>          <ul>              <li>csak belföldi alapszolgáltatáshoz használható elemeket a leírás elején szereplő ►DOM◄,</li>              <li>csak nemzetközi vonatkozásban használható elemeket a leírás elején szereplő ►INT◄</li>          </ul>          <p>szöveg jelzi.</p>          <p>Ahol nem szerepel semmilyen jelölés, azok az elemek mindkét vonatkozásban használhatók.</p>      </div>      <div style='float:right; width:47%'>          <h1>MPL API</h1>          <h2> - query of fixed points, printing of address labels, request for reports </h2>          <div>&nbsp;</div>          <p>Specification describing the operation of endpoints can be found below.</p>          <p>Any further information necessary for the development, such as the integration suggestion, technical description (token request), example JSONs, etc., are available by clicking on the Documentation menu above.</p>          <p>In the specification below,</p>          <ul>              <li>the elements that may be used only for domestic basic service are indicated by the lettering ►DOM◄,</li>              <li>the elements that may be used only in international regard are indicated by the lettering ►INT◄</li>          </ul>          <p>at the beginning of the description.</p>          <p>Where no indication is provided, those elements can be used in both cases.</p>      </div>  </div>  <div id=\"mplapi_descriptionContainer_bottom\"></div><div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/mplapi</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/mplapi</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WebnessStudio/MPL/Model\Model;

use \ArrayAccess;
use \WebnessStudio/MPL/Model\ObjectSerializer;

/**
 * Service Class Doc Comment
 *
 * @category Class
 * @description Csomaghoz tartozó postai szolgáltatások.   /   Postal services included with the parcel.
 * @package  WebnessStudio/MPL/Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Service implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Service';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'basic' => 'string',
        'extra' => 'string[]',
        'cod' => 'double',
        'value' => 'int',
        'delivery_mode' => 'string',
        'cod_currency' => 'string',
        'supplementary_sheet_nr' => 'int',
        'customs_value' => 'double',
        'export_authorisation' => 'string',
        'other_comment' => 'string',
        'sec_id' => 'bool',
        'customs_value_currency' => 'string',
        'produce_content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'basic' => null,
        'extra' => null,
        'cod' => 'double',
        'value' => 'int64',
        'delivery_mode' => null,
        'cod_currency' => null,
        'supplementary_sheet_nr' => 'int64',
        'customs_value' => 'double',
        'export_authorisation' => null,
        'other_comment' => null,
        'sec_id' => null,
        'customs_value_currency' => null,
        'produce_content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'basic' => 'basic',
        'extra' => 'extra',
        'cod' => 'cod',
        'value' => 'value',
        'delivery_mode' => 'deliveryMode',
        'cod_currency' => 'codCurrency',
        'supplementary_sheet_nr' => 'supplementarySheetNr',
        'customs_value' => 'customsValue',
        'export_authorisation' => 'exportAuthorisation',
        'other_comment' => 'otherComment',
        'sec_id' => 'secId',
        'customs_value_currency' => 'customsValueCurrency',
        'produce_content' => 'produceContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'basic' => 'setBasic',
        'extra' => 'setExtra',
        'cod' => 'setCod',
        'value' => 'setValue',
        'delivery_mode' => 'setDeliveryMode',
        'cod_currency' => 'setCodCurrency',
        'supplementary_sheet_nr' => 'setSupplementarySheetNr',
        'customs_value' => 'setCustomsValue',
        'export_authorisation' => 'setExportAuthorisation',
        'other_comment' => 'setOtherComment',
        'sec_id' => 'setSecId',
        'customs_value_currency' => 'setCustomsValueCurrency',
        'produce_content' => 'setProduceContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'basic' => 'getBasic',
        'extra' => 'getExtra',
        'cod' => 'getCod',
        'value' => 'getValue',
        'delivery_mode' => 'getDeliveryMode',
        'cod_currency' => 'getCodCurrency',
        'supplementary_sheet_nr' => 'getSupplementarySheetNr',
        'customs_value' => 'getCustomsValue',
        'export_authorisation' => 'getExportAuthorisation',
        'other_comment' => 'getOtherComment',
        'sec_id' => 'getSecId',
        'customs_value_currency' => 'getCustomsValueCurrency',
        'produce_content' => 'getProduceContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BASIC__175_UZL = 'A_175_UZL';
    const BASIC__177_MPC = 'A_177_MPC';
    const BASIC__176_NET = 'A_176_NET';
    const BASIC__176_NKP = 'A_176_NKP';
    const BASIC__122_ECS = 'A_122_ECS';
    const BASIC__121_CSG = 'A_121_CSG';
    const BASIC__13_EMS = 'A_13_EMS';
    const BASIC__123_EUP = 'A_123_EUP';
    const BASIC__123_HAR = 'A_123_HAR';
    const BASIC__123_HAI = 'A_123_HAI';
    const BASIC__125_HAR = 'A_125_HAR';
    const BASIC__125_HAI = 'A_125_HAI';
    const EXTRA_ENY = 'K_ENY';
    const EXTRA_TER = 'K_TER';
    const EXTRA_UVT = 'K_UVT';
    const EXTRA_TOR = 'K_TOR';
    const EXTRA_ORZ = 'K_ORZ';
    const EXTRA_IDO = 'K_IDO';
    const EXTRA_RLC = 'K_RLC';
    const EXTRA_TEV = 'K_TEV';
    const EXTRA_MSZ = 'K_MSZ';
    const EXTRA_SKZ = 'K_SKZ';
    const EXTRA_ALA = 'K_ALA';
    const EXTRA_BER = 'K_BER';
    const EXTRA_EKE = 'K_EKE';
    const EXTRA_AAT = 'K_AAT';
    const EXTRA_AAA = 'K_AAA';
    const EXTRA_DOK = 'K_DOK';
    const EXTRA_TEP = 'K_TEP';
    const EXTRA_PSZ = 'K_PSZ';
    const EXTRA_IDA = 'K_IDA';
    const EXTRA_FNK = 'K_FNK';
    const EXTRA_EXT = 'K_EXT';
    const EXTRA_CSE = 'K_CSE';
    const EXTRA_CSA = 'K_CSA';
    const EXTRA_INV = 'K_INV';
    const EXTRA_LEH = 'K_LEH';
    const EXTRA_TET = 'K_TET';
    const EXTRA_GLO = 'K_GLO';
    const EXTRA_LEZ = 'K_LEZ';
    const EXTRA_POT = 'K_POT';
    const EXTRA_VNY = 'K_VNY';
    const EXTRA_EFF = 'K_EFF';
    const EXTRA_VIK = 'K_VIK';
    const EXTRA_ZSK = 'K_ZSK';
    const EXTRA_EFC = 'K_EFC';
    const EXTRA_DU = 'K_DU';
    const EXTRA_LX = 'K_LX';
    const EXTRA_KRC = 'K_KRC';
    const EXTRA_ESZ = 'K_ESZ';
    const EXTRA_ETV = 'K_ETV';
    const EXTRA_KRF = 'K_KRF';
    const EXTRA__VAR = 'K_VAR';
    const EXTRA_UTN = 'K_UTN';
    const EXTRA_VER = 'K_VER';
    const EXTRA_EPR = 'K_EPR';
    const EXTRA_IDG = 'K_IDG';
    const EXTRA_KNY = 'K_KNY';
    const EXTRA_KOR = 'K_KOR';
    const EXTRA_PRE = 'K_PRE';
    const EXTRA_UTK = 'K_UTK';
    const EXTRA_ANT = 'K_ANT';
    const EXTRA_CIP = 'K_CIP';
    const DELIVERY_MODE_HA = 'HA';
    const DELIVERY_MODE_RA = 'RA';
    const DELIVERY_MODE_PP = 'PP';
    const DELIVERY_MODE_CS = 'CS';
    const DELIVERY_MODE_PM = 'PM';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBasicAllowableValues()
    {
        return [
            self::BASIC__175_UZL,
            self::BASIC__177_MPC,
            self::BASIC__176_NET,
            self::BASIC__176_NKP,
            self::BASIC__122_ECS,
            self::BASIC__121_CSG,
            self::BASIC__13_EMS,
            self::BASIC__123_EUP,
            self::BASIC__123_HAR,
            self::BASIC__123_HAI,
            self::BASIC__125_HAR,
            self::BASIC__125_HAI,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExtraAllowableValues()
    {
        return [
            self::EXTRA_ENY,
            self::EXTRA_TER,
            self::EXTRA_UVT,
            self::EXTRA_TOR,
            self::EXTRA_ORZ,
            self::EXTRA_IDO,
            self::EXTRA_RLC,
            self::EXTRA_TEV,
            self::EXTRA_MSZ,
            self::EXTRA_SKZ,
            self::EXTRA_ALA,
            self::EXTRA_BER,
            self::EXTRA_EKE,
            self::EXTRA_AAT,
            self::EXTRA_AAA,
            self::EXTRA_DOK,
            self::EXTRA_TEP,
            self::EXTRA_PSZ,
            self::EXTRA_IDA,
            self::EXTRA_FNK,
            self::EXTRA_EXT,
            self::EXTRA_CSE,
            self::EXTRA_CSA,
            self::EXTRA_INV,
            self::EXTRA_LEH,
            self::EXTRA_TET,
            self::EXTRA_GLO,
            self::EXTRA_LEZ,
            self::EXTRA_POT,
            self::EXTRA_VNY,
            self::EXTRA_EFF,
            self::EXTRA_VIK,
            self::EXTRA_ZSK,
            self::EXTRA_EFC,
            self::EXTRA_DU,
            self::EXTRA_LX,
            self::EXTRA_KRC,
            self::EXTRA_ESZ,
            self::EXTRA_ETV,
            self::EXTRA_KRF,
            self::EXTRA__VAR,
            self::EXTRA_UTN,
            self::EXTRA_VER,
            self::EXTRA_EPR,
            self::EXTRA_IDG,
            self::EXTRA_KNY,
            self::EXTRA_KOR,
            self::EXTRA_PRE,
            self::EXTRA_UTK,
            self::EXTRA_ANT,
            self::EXTRA_CIP,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryModeAllowableValues()
    {
        return [
            self::DELIVERY_MODE_HA,
            self::DELIVERY_MODE_RA,
            self::DELIVERY_MODE_PP,
            self::DELIVERY_MODE_CS,
            self::DELIVERY_MODE_PM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['basic'] = isset($data['basic']) ? $data['basic'] : null;
        $this->container['extra'] = isset($data['extra']) ? $data['extra'] : null;
        $this->container['cod'] = isset($data['cod']) ? $data['cod'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['delivery_mode'] = isset($data['delivery_mode']) ? $data['delivery_mode'] : null;
        $this->container['cod_currency'] = isset($data['cod_currency']) ? $data['cod_currency'] : null;
        $this->container['supplementary_sheet_nr'] = isset($data['supplementary_sheet_nr']) ? $data['supplementary_sheet_nr'] : null;
        $this->container['customs_value'] = isset($data['customs_value']) ? $data['customs_value'] : null;
        $this->container['export_authorisation'] = isset($data['export_authorisation']) ? $data['export_authorisation'] : null;
        $this->container['other_comment'] = isset($data['other_comment']) ? $data['other_comment'] : null;
        $this->container['sec_id'] = isset($data['sec_id']) ? $data['sec_id'] : null;
        $this->container['customs_value_currency'] = isset($data['customs_value_currency']) ? $data['customs_value_currency'] : null;
        $this->container['produce_content'] = isset($data['produce_content']) ? $data['produce_content'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['basic'] === null) {
            $invalidProperties[] = "'basic' can't be null";
        }
        $allowedValues = $this->getBasicAllowableValues();
        if (!is_null($this->container['basic']) && !in_array($this->container['basic'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'basic', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['delivery_mode'] === null) {
            $invalidProperties[] = "'delivery_mode' can't be null";
        }
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!is_null($this->container['delivery_mode']) && !in_array($this->container['delivery_mode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets basic
     *
     * @return string
     */
    public function getBasic()
    {
        return $this->container['basic'];
    }

    /**
     * Sets basic
     *
     * @param string $basic Az alapszolgáltatás   /   Basic service
     *
     * @return $this
     */
    public function setBasic($basic)
    {
        $allowedValues = $this->getBasicAllowableValues();
        if (!in_array($basic, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'basic', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['basic'] = $basic;

        return $this;
    }

    /**
     * Gets extra
     *
     * @return string[]
     */
    public function getExtra()
    {
        return $this->container['extra'];
    }

    /**
     * Sets extra
     *
     * @param string[] $extra A kiválasztott többletszolgáltatások kódjai.   /   Codes for the selected additional services.
     *
     * @return $this
     */
    public function setExtra($extra)
    {
        $allowedValues = $this->getExtraAllowableValues();
        if (!is_null($extra) && array_diff($extra, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'extra', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['extra'] = $extra;

        return $this;
    }

    /**
     * Gets cod
     *
     * @return double
     */
    public function getCod()
    {
        return $this->container['cod'];
    }

    /**
     * Sets cod
     *
     * @param double $cod Az utánvét összege Ft-ban egész számként   /   The amount of insured items in HUF, as integer, is 2 million max.
     *
     * @return $this
     */
    public function setCod($cod)
    {
        $this->container['cod'] = $cod;

        return $this;
    }

    /**
     * Gets value
     *
     * @return int
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param int $value Az értéknyilvánítás (biztosítás) összege Ft-ban, egész számként, max 2 millió.   /   The amount of the value insurance in HUF as a whole number
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets delivery_mode
     *
     * @return string
     */
    public function getDeliveryMode()
    {
        return $this->container['delivery_mode'];
    }

    /**
     * Sets delivery_mode
     *
     * @param string $delivery_mode A kézbesítés módja / Method of delivery.
     *
     * @return $this
     */
    public function setDeliveryMode($delivery_mode)
    {
        $allowedValues = $this->getDeliveryModeAllowableValues();
        if (!in_array($delivery_mode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_mode'] = $delivery_mode;

        return $this;
    }

    /**
     * Gets cod_currency
     *
     * @return string
     */
    public function getCodCurrency()
    {
        return $this->container['cod_currency'];
    }

    /**
     * Sets cod_currency
     *
     * @param string $cod_currency ►INT◄ Utánvét devizaneme  / Cash on delivery currency
     *
     * @return $this
     */
    public function setCodCurrency($cod_currency)
    {
        $this->container['cod_currency'] = $cod_currency;

        return $this;
    }

    /**
     * Gets supplementary_sheet_nr
     *
     * @return int
     */
    public function getSupplementarySheetNr()
    {
        return $this->container['supplementary_sheet_nr'];
    }

    /**
     * Sets supplementary_sheet_nr
     *
     * @param int $supplementary_sheet_nr ►INT◄ Pótlapszám / Supplementary sheet number
     *
     * @return $this
     */
    public function setSupplementarySheetNr($supplementary_sheet_nr)
    {
        $this->container['supplementary_sheet_nr'] = $supplementary_sheet_nr;

        return $this;
    }

    /**
     * Gets customs_value
     *
     * @return double
     */
    public function getCustomsValue()
    {
        return $this->container['customs_value'];
    }

    /**
     * Sets customs_value
     *
     * @param double $customs_value ►INT◄ Vám érték / Customs value
     *
     * @return $this
     */
    public function setCustomsValue($customs_value)
    {
        $this->container['customs_value'] = $customs_value;

        return $this;
    }

    /**
     * Gets export_authorisation
     *
     * @return string
     */
    public function getExportAuthorisation()
    {
        return $this->container['export_authorisation'];
    }

    /**
     * Sets export_authorisation
     *
     * @param string $export_authorisation ►INT◄ Export engedély / Export authorisation
     *
     * @return $this
     */
    public function setExportAuthorisation($export_authorisation)
    {
        $this->container['export_authorisation'] = $export_authorisation;

        return $this;
    }

    /**
     * Gets other_comment
     *
     * @return string
     */
    public function getOtherComment()
    {
        return $this->container['other_comment'];
    }

    /**
     * Sets other_comment
     *
     * @param string $other_comment ►INT◄ Egyéb megjegyzés / Other comment
     *
     * @return $this
     */
    public function setOtherComment($other_comment)
    {
        $this->container['other_comment'] = $other_comment;

        return $this;
    }

    /**
     * Gets sec_id
     *
     * @return bool
     */
    public function getSecId()
    {
        return $this->container['sec_id'];
    }

    /**
     * Sets sec_id
     *
     * @param bool $sec_id ►INT◄ A_125_HAR alapszolgáltatás megadásakor true érték esetén az API az inverz csomag adatait is létrehozza és visszaadja a válaszban.\\   /   When the A_125_HAR basic service is provided, the API also generates and returns the inverse parcel data in the response.
     *
     * @return $this
     */
    public function setSecId($sec_id)
    {
        $this->container['sec_id'] = $sec_id;

        return $this;
    }

    /**
     * Gets customs_value_currency
     *
     * @return string
     */
    public function getCustomsValueCurrency()
    {
        return $this->container['customs_value_currency'];
    }

    /**
     * Sets customs_value_currency
     *
     * @param string $customs_value_currency ►INT◄ Valutanem / Currency
     *
     * @return $this
     */
    public function setCustomsValueCurrency($customs_value_currency)
    {
        $this->container['customs_value_currency'] = $customs_value_currency;

        return $this;
    }

    /**
     * Gets produce_content
     *
     * @return string
     */
    public function getProduceContent()
    {
        return $this->container['produce_content'];
    }

    /**
     * Sets produce_content
     *
     * @param string $produce_content ►INT◄ Áru tartalom kódja. / Produce content code.
     *
     * @return $this
     */
    public function setProduceContent($produce_content)
    {
        $this->container['produce_content'] = $produce_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
