<?php
/**
 * DeliveryPlaceRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  WebnessStudio\MPL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MPL API
 *
 * <div style='width: 100%;margin: 0px auto;'>      <div style='float: left; width:47%'>          <h1>MPL API</h1>          <h2> - címiratok nyomtatása, riportok lekérése, fixpontok lekérdezése </h2>          <div>&nbsp;</div>          <p>A végpontok működését leíró dokumentációt lentebb találja.</p>          <p>A fejlesztéshez szükséges további információkat, így az integrációs javaslatot, technikai leírást (token kérés), példa json-öket, stb., a fenti Dokumentáció menüre kattintva érheti el.</p>          <p>A lentebbi dokumentációban a</p>          <ul>              <li>csak belföldi alapszolgáltatáshoz használható elemeket a leírás elején szereplő ►DOM◄,</li>              <li>csak nemzetközi vonatkozásban használható elemeket a leírás elején szereplő ►INT◄</li>          </ul>          <p>szöveg jelzi.</p>          <p>Ahol nem szerepel semmilyen jelölés, azok az elemek mindkét vonatkozásban használhatók.</p>      </div>      <div style='float:right; width:47%'>          <h1>MPL API</h1>          <h2> - query of fixed points, printing of address labels, request for reports </h2>          <div>&nbsp;</div>          <p>Specification describing the operation of endpoints can be found below.</p>          <p>Any further information necessary for the development, such as the integration suggestion, technical description (token request), example JSONs, etc., are available by clicking on the Documentation menu above.</p>          <p>In the specification below,</p>          <ul>              <li>the elements that may be used only for domestic basic service are indicated by the lettering ►DOM◄,</li>              <li>the elements that may be used only in international regard are indicated by the lettering ►INT◄</li>          </ul>          <p>at the beginning of the description.</p>          <p>Where no indication is provided, those elements can be used in both cases.</p>      </div>  </div>  <div id=\"mplapi_descriptionContainer_bottom\"></div><div style='clear: both;'>    ### Az API a következő URL-eken érhető el: / This API can be accessed at the following URLs: ###  <div><table><tr><td><b>Környezet / Environment</b></td><td><b>API URL</b></td><td><b>OAuth2 Token URL</b></td></tr><tr><td>Sandbox</td><td>https://sandbox.api.posta.hu/v2/mplapi</td><td>https://sandbox.api.posta.hu/oauth2/token</td></tr><tr><td>Production</td><td>https://core.api.posta.hu/v2/mplapi</td><td>https://core.api.posta.hu/oauth2/token</td></tr></table>  Az API ezen az oldalon a Sandbox környezetben tesztelhető. / You can test the API on this page in the Sandbox environment.
 *
 * OpenAPI spec version: v2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.54
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WebnessStudio\MPL\Model;

use \ArrayAccess;
use \WebnessStudio\MPL\ObjectSerializer;

/**
 * DeliveryPlaceRequest Class Doc Comment
 *
 * @category Class
 * @description Fixponti kézbesítési helyek lekérdezés kérés. Üres tömb beküldése esetén az összes fixpontunkat megkaphatja egyetlen lekérdezéssel.\\  Háznál kézbesítésen (HA) kívül háromféle másik, úgynevezett fixponti kézbesítési mód támogatott: PostaPont(PP), Postán maradó(PM), Csomagautomata(CS).\\  Fixponti kézbesítés választása esetén a folyamatban később, a csomag adatainak beküldésekor két adatra lesz szükség: a fixponti hely pontos neve (string), illetve a kézbesítési mód kódja (PP, PM, CS).\\   / \\  Request for the query of places of fixed point delivery. In case of sending in an empty array, you may receive all of our fixed point by one query.\\  Besides home delivery(HD), three other so-called fixed point delivery methods are supported: Postal Point(PP), Poste Restante(PR), Parcel Terminal(PT).\\  In case of choosing fixed point delivery, two pieces of information shall be provided later in the process, when sending in the data of the mail item: the correct name of the place of fixed point (string) and the code of the delivery method (PP, PR, PT).
 * @package  WebnessStudio\MPL
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryPlaceRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryPlaceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deliveryplaces_query' => '\WebnessStudio\MPL\Model\DeliveryPlacesQuery',
        'service_point_type' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deliveryplaces_query' => null,
        'service_point_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deliveryplaces_query' => 'deliveryplacesQuery',
        'service_point_type' => 'servicePointType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deliveryplaces_query' => 'setDeliveryplacesQuery',
        'service_point_type' => 'setServicePointType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deliveryplaces_query' => 'getDeliveryplacesQuery',
        'service_point_type' => 'getServicePointType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SERVICE_POINT_TYPE_PM = 'PM';
    const SERVICE_POINT_TYPE_CS = 'CS';
    const SERVICE_POINT_TYPE_PP = 'PP';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getServicePointTypeAllowableValues()
    {
        return [
            self::SERVICE_POINT_TYPE_PM
            self::SERVICE_POINT_TYPE_CS
            self::SERVICE_POINT_TYPE_PP
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deliveryplaces_query'] = isset($data['deliveryplaces_query']) ? $data['deliveryplaces_query'] : null;
        $this->container['service_point_type'] = isset($data['service_point_type']) ? $data['service_point_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deliveryplaces_query
     *
     * @return \WebnessStudio\MPL\Model\DeliveryPlacesQuery
     */
    public function getDeliveryplacesQuery()
    {
        return $this->container['deliveryplaces_query'];
    }

    /**
     * Sets deliveryplaces_query
     *
     * @param \WebnessStudio\MPL\Model\DeliveryPlacesQuery $deliveryplaces_query deliveryplaces_query
     *
     * @return $this
     */
    public function setDeliveryplacesQuery($deliveryplaces_query)
    {
        $this->container['deliveryplaces_query'] = $deliveryplaces_query;

        return $this;
    }

    /**
     * Gets service_point_type
     *
     * @return string[]
     */
    public function getServicePointType()
    {
        return $this->container['service_point_type'];
    }

    /**
     * Sets service_point_type
     *
     * @param string[] $service_point_type Szolgáltatási pont típusa.   /   Type of service point.
     *
     * @return $this
     */
    public function setServicePointType($service_point_type)
    {
        $allowedValues = $this->getServicePointTypeAllowableValues();
        if (!is_null($service_point_type) && array_diff($service_point_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'service_point_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['service_point_type'] = $service_point_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
